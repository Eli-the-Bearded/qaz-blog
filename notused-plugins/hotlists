#!/usr/bin/perl
# Blosxom Plugin: hotlists
# Author(s): Jason Thaxter <sseye@ahab.com>
# Version: 0.8.4
# Documentation: See the bottom of this file or type: perldoc hotlists

package hotlists;

# --- Configurable variables -----

# number of entries to display in each box.
$num_entries = 5;

# plumb subdirectories to find the most recent stories
$subdirs = 0;

# remove directories with this...
# a good way to improve performance by ignoring subdirectories.
@prune_dirs = qw();

# --------------------------------

$num_entries ||= 5;
$subdirs ||= 0;
$prunedirs = (join('|',@prune_dirs) or '!');

%hotstack; # make stacks here
%hotlists;
%hotcount;
$test;

use FileHandle;
$fh = new FileHandle;
%template;

sub start {

	1;
}

sub filter {
	my ($pkg, $files_ref) = @_;
	# get lists
	foreach my $fn ( keys %$files_ref ) {

		next if $fn =~ /$prunedirs/;
		my $f = $fn;
		$f =~ s!$blosxom::datadir!!;
		my $path = '';

		# work down the directory tree, remembering results for each directory as we go
		while ($f =~ s!([^/]*/)!! and $path .= $1){

			$subdirs_here = $subdirs;
			unless ($subdirs_here or !($f =~ /\//)){ # don't count unless we're at the end
				warn "skipping: $f :: $path";
				next;
			} #else { warn "subdirs = $subdirs  :: $f :: $path"; }
			$hotcount{$path}++; # running total

			$entries_here = $num_entries;

			# else, merge this into the stack, by modification date
			for (my $i=0; $i<=$entries_here; $i++){
				if ($hotstack{$path}->[$i]){
					if ($files_ref->{$fn} > $files_ref->{"$blosxom::datadir$hotstack{$path}->[$i]"}){
						splice @{$hotstack{$path}}, $i, 0, $path . $f ;
						last;
					}
				}
				else { # append until we run out of space
					$hotstack{$path}->[$i] = $path . $f;
					last;
				}
			}
			$#{$hotstack{$path}} = ($entries_here-1); # dump any excess entries

		} # next directory down the path...
	}

  1;
}

# do the actual rendering...
# once we know our actual context
sub head {
	my ($pkg, $cf, $head_ref) = @_;

	# prep render defaults
	my $flavour = ($blosxom::flavour or $blosxom::default_flavour or 'html');
	while (<DATA>) {
		last if /^(__END__)?$/;
		my ($flavour,$chunk,$txt) = /^(\S+)\s(\S+)\s(.*)$/;
		$txt =~ s/\\n/\n/mg;
		$template{$flavour}{$chunk} = $txt;
	}

	# render items
	while (my ($thislist,$entries) = each %hotstack){

		# destination variable name
		my $var = "hotlists::hotlists" . join('::',(split('/',$thislist))); 

		# template variables
		my $hot_count = $hotcount{$thislist};
		my $hot_path = $thislist;
		my $hot_pathname = $hot_path;
		$hot_path = "$blosxom::url$hot_path";
		$hot_pathname =~ s{^/*([^/]+)/*$}{$1}; # remove final and terminal slashes

		# head
		$var =~ s/::(\d)/::_$1/g; # see note in pod doc
		$$var = (load_template("$blosxom::datadir$thislist",'hothead',$flavour));

		# item
		foreach my $hot_item (@$entries){

			# per-item template variables
			my ($hot_item_title);
			if (-T "$blosxom::datadir$hot_item" && $fh->open("< $blosxom::datadir$hot_item")) {
				chomp($hot_item_title = <$fh>);
			}
			$fh->close;
			$hot_item =~ s/$blosxom::file_extension$/$flavour/ee;
			$hot_item = "$blosxom::url$hot_item";
			$hot_date = &blosxom::date("$blosxom::datadir$hot_item");

			# get the title - it's all we are going to support for now
			my $item = (load_template("$blosxom::datadir/$cf",'hotbody',$flavour));
			$item =~ s/((\$[\w:]+)|(\$\{[\w:]+\}))/$1 . "||''"/gee;
			$$var .= $item;
		}

		# tail
		$$var .= (load_template("$blosxom::datadir/$cf",'hotfoot',$flavour));
		$$var =~ s/((\$[\w:]+)|(\$\{[\w:]+\}))/$1 . "||''"/gee;
	}


  1;
}

# right now the same as the one i wrote for blosxom proper.
sub load_template {
  my ($path, $chunk, $flavour) = @_;
  do {
    return join '', <$fh> if $fh->open("< $datadir/$path/$chunk.$flavour");
  } while ($path =~ s/(\/*[^\/]*)$// and $1);
  return $template{$flavour}{$chunk} || '';
}


1;

__DATA__
html hothead <div class="hotlist"><a href="$hot_path"><b>$hot_pathname</b> ($hot_count)</a><br />\n
html hotbody $hot_date::<a href="$hot_item">$hot_item_title</a><br />\n
html hotfoot </div>\n
__END__

=head1 NAME

Blosxom Plug-in: hotlists

=head1 SYNOPSIS

This plugin is for populating lists of recent entries, either in all or by
category.  C<$hotlists::hotlists> gives the most recent articles in the entire
C<$datadir>.  C<$hotlists::hotlists::computer_stuff> gives the most recent
article in the C<computer_stuff> subdirectory of datadir.
C<$hotlists::hotlists::beverages::moxie> contains the most recent articles in
C<beverages/moxie>. And so on.

=head1 USAGE

The number of entries chosen is controlled by a configuration variable, but if
the C<config> plugin is used, the value of C<$bloxsom::hotlists_entries> can be
used to set the number of variables on a per-directory basis.  Similarly,
C<$blosxom::hotlists_subdirs> can be used to set this behavior.  The final
configuration variable, @prune_dirs, hasn't been done yet, and won't ever be if
no one needs it.

Flavour and templates work in the same was as bloxsom.  The templates for this
plugin are hothead, hotbody, and hotfoot.  They control the formatting for,
repsectively, a lead-in, each recent item, usually a link to a story, and a
tail.  Normally, you can use it without templates and do formatting via the css
class "hotlist".  Standard bloxsom variables should work, but haven't yet been
tested.

Directories beginning with a number get prepended with C<_> so as not to cause
the perl error C<Modification of a read-only value attempted>.  So, if you use
both numbers and underscores at the at the beginning, you are asking for
trouble.

Variables:

=over 4

=item $hot_count

This is the total number of items in a given directory/category.

=item $hot_path

The URL of the directory being summarized.

=item $hot_pathname

The path of the directory, relative to $dirpath.

=item $hot_count

The number of items summarized under $hot_count, taking into account whether or
not subdirectories are being examined.

=item $hot_item

The link to a recent item.  Available on a per-item basis only.

=item $hot_item_title

The title of the item, from the first line of the file.

=back

Variable names could still change before version 1.0, if there is a good reason.

=head1 VERSION

Version 0.8.4

=head1 AUTHOR

Jason Thaxter <sseye@ahab.com>, http://ahab.com/

=head1 SEE ALSO

Blosxom Home/Docs/Licensing: http://www.raelity.org/apps/blosxom/

Blosxom Plugin Docs: http://www.raelity.org/apps/blosxom/plugin.shtml

=head1 BUGS

Address bug reports and comments to the Blosxom mailing list
[http://www.yahoogroups.com/group/blosxom] or to the author.

=head1 LICENSE

Blosxom and this Blosxom Plug-in
Copyright 2003, Jason Thaxter

Permission is hereby granted, free of charge, to any person obtaining a
copy of this software and associated documentation files (the "Software"),
to deal in the Software without restriction, including without limitation
the rights to use, copy, modify, merge, publish, distribute, sublicense,
and/or sell copies of the Software, and to permit persons to whom the
Software is furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included
in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
OTHER DEALINGS IN THE SOFTWARE.
